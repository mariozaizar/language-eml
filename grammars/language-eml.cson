scopeName: 'text.eml.basic'
name: 'Email (EML)'
fileTypes: ['eml', 'msg', 'mbx', 'mbox']
patterns: [
  {include: "#addresses"}
  {include: "#headers"}
  {include: "#encodedWord"}
  {include: "#specials"}
  {include: "#uuid"}
  {include: "#base64"}
  {include: "#html"}
  {include: "#quote"}
  {include: "#ipv4"}
  {include: "#ipv6"}
]

repository:
  
  # Email addresses
  addresses:
    patterns: [
      {
        # "John Doe" <john.doe@example.com>
        name: 'meta.email-address.eml'
        match: """(?x)
          ((") [-a-zA-Z0-9.\\x20+_]+ (")) \\s*
          ((<) [-a-zA-Z0-9.]+@[-a-zA-Z0-9.]+ (>))
        """
        captures:
          1: name: "string.quoted.double.author-name.eml"
          2: name: "punctuation.definition.string.begin.eml"
          3: name: "punctuation.definition.string.end.eml"
          4: name: "constant.other.author-address.eml"
          5: name: "punctuation.definition.tag.begin.eml"
          6: name: "punctuation.definition.tag.end.eml"
      }
      {
        # "John Doe" &lt;john.doe@example.com&gt;
        name: 'meta.email-address.eml'
        match: """(?x)
          ((") [-a-zA-Z0-9.\\ +_]+ (")) \\s*
          ((&lt;) [-a-zA-Z0-9.]+@[-a-zA-Z0-9.]+ (&gt;))
        """
        captures:
          1: name: "string.quoted.double.author-name.eml"
          2: name: "punctuation.definition.string.begin.eml"
          3: name: "punctuation.definition.string.end.eml"
          4: name: "constant.other.author-address.eml"
          5: name: "punctuation.definition.tag.begin.eml"
          6: name: "punctuation.definition.tag.end.eml"
      }
      {
        # John <john.doe@example.com>
        name: 'meta.email-address.eml'
        match: """(?x)
          ([-a-zZ-Z0-9.+_]+) \\s*
          (<)([-a-zA-Z0-9.]+@[-a-zA-Z0-9.]+)(>)
        """
        captures:
          1: name: "string.unquoted.author-name.eml"
          2: name: "punctuation.definition.tag.begin.eml"
          3: name: "constant.other.author-address.eml"
          4: name: "punctuation.definition.tag.end.eml"
      }
      {
        # John &lt;john.doe@example.com&gt;
        name: 'meta.email-address.eml'
        match: """(?x)
          ([-a-zZ-Z0-9.+_]+) \\s*
          (&lt;)([-a-zA-Z0-9.]+@[-a-zA-Z0-9.]+)(&gt;)
        """
        captures:
          1: name: "string.unquoted.author-name.eml"
          2: name: "punctuation.definition.tag.begin.eml"
          3: name: "constant.other.author-address.eml"
          4: name: "punctuation.definition.tag.end.eml"
      }
      {
        # &lt;john.doe@example.com&gt;
        match: '(&lt;)([-a-zA-Z0-9.+_]+@[-a-zA-Z0-9.]+)(&gt;)'
        captures:
          1: name: "punctuation.definition.tag.begin.eml"
          2: name: "constant.other.author-address.eml"
          3: name: "punctuation.definition.tag.end.eml"
      }
      {
        # <john.doe@example.com>
        match: '(<)([-a-zA-Z0-9.+_]+@[-a-zA-Z0-9.]+)(>)'
        captures:
          1: name: "punctuation.definition.tag.begin.eml"
          2: name: "constant.other.author-address.eml"
          3: name: "punctuation.definition.tag.end.eml"
      }
    ]

  # Content-Transfer-Encoding: base64
  base64:
    name: 'text.eml.encoded'
    match: """(?x) ^
      (?:[A-Za-z0-9+/]{4})+
      (?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
    """


  # Header fields
  headers:
    captures:
      1: name: "variable.header.name.eml"
      2: name: "punctuation.separator.dictionary.key-value.colon.eml"
    match: """(?xi) ^
      ( archived-at
      | cc
      | content-type
      | date
      | envelope-from
      | from
      | in-reply-to
      | mail-from
      | message-id
      | precedence
      | references
      | reply-to
      | return-path
      | sender
      | subject
      | to
      | x-cmae-virus
      | \\d*zendesk\\d*
      | [^:]*resent-[^:]*
      | x-[^:]*
      | [A-Z][a-zA-Z0-9-]*
      ) (:)
    """

  # Encoded-words (https://www.ietf.org/rfc/rfc2047.txt)
  encodedWord:
    name: 'keyword.control.encoded-word.eml'
    match: '(?i)=\\?utf-8\\?B\\?(.*)\\?='

  # Content-Type: text/html;
  html:
    name:  "meta.embedded.html.eml"
    begin: "(?i)^(?=<html[\\s>])"
    end:   "(?<=</html>)"
    patterns: [include: 'text.html.basic']

  # IPv4
  ipv4:
    name: 'variable.other.ipv4.eml'
    match: "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"

  # IPv6
  ipv6:
    name: 'variable.other.eml'
    match: """(?x)
      ( ([0-9a-fA-F]{1,4}:){7}     [0-9a-fA-F]{1,4}
      | ([0-9a-fA-F]{1,4}:){1,7}  :
      | ([0-9a-fA-F]{1,4}:){1,6}  :[0-9a-fA-F]{1,4}
      | ([0-9a-fA-F]{1,4}:){1,5} (:[0-9a-fA-F]{1,4}){1,2}
      | ([0-9a-fA-F]{1,4}:){1,4} (:[0-9a-fA-F]{1,4}){1,3}
      | ([0-9a-fA-F]{1,4}:){1,3} (:[0-9a-fA-F]{1,4}){1,4}
      | ([0-9a-fA-F]{1,4}:){1,2} (:[0-9a-fA-F]{1,4}){1,5}
      | [0-9a-fA-F]{1,4}          :((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)
      | fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+
      | ::(ffff(:0{1,4})?:)? ((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9])
      | ([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9])
      )
    """

  # Quoted Text
  quote:
    name:  'markup.quote.line.eml'
    begin: '^[|>]'
    end:   "$"
    beginCaptures:
      0: name: "punctuation.definition.comment.quote.eml"

  # Specials
  specials:
    patterns: [{
      name: 'keyword.operator.special.eml'
      match: """(?xi)
        ( base64
        | multipart\\/.*:
        | image\\/.*;
        | text\\/.*
        | boundary=.*
        )
      """
    },{
      name: 'keyword.control.eml'
      match: '^--(?!>).*',
    }]

  # UUID
  uuid:
    name: 'constant.other.uuid.eml'
    match: """(?x)
      ( [0-9a-fA-F]{32}
      | [0-9a-fA-F]{8}(?:-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}
      )
    """
